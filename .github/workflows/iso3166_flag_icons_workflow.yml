name: Building and Testing

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    paths-ignore: 
      - '**/README.md'
      - '**/.yml'
      - '**/.ipynb'
      - 'docs/**/*'
      - LICENSE
      - .gitignore
  pull_request:
    branches: [ master ]

  # allow for workflow to be manually initiated from the Actions tab
  workflow_dispatch:

#build and test iso3166-flag-icons
jobs:
  #test job, waits for build job to complete
  test:
    runs-on: ubuntu-latest         # platform: [ubuntu-latest, macos-latest, windows-latest]
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]   #testing on multiple python versions
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # install all required modules and dependancies using pip 
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip3 install codecov
        pip3 install coverage
        pip3 install pytest
        pip3 install pytest-cov
        pip3 install bandit
        pip3 install safety
        if [ -f scripts/requirements.txt ]; then pip install -r scripts/requirements.txt; fi

    #create artifacts dir
    - name: Artifacts mkdir
      run: mkdir artifacts

    #package vulnerability check
    - name: Package safety check
      run: |
        echo "Running package safety check"
        python3 -m safety check > artifacts/package_safety_output.txt
        cat artifacts/package_safety_output.txt
      continue-on-error: true

    #run Bandit security check for any known vulnerabilities in code
    - name: Bandit
      run: |
        echo "Running Bandit"
        python3 -m bandit -r scripts > artifacts/bandit_output.txt
        cat artifacts/bandit_output.txt
      continue-on-error: true

    # unit tests using unittest 
    - name: Testing with unittest
      run: |
        echo "Testing using unittest..."
        cd scripts/
        python3 -m unittest tests.test_iso3166
        python3 -m unittest tests.test_iso3166-1
        python3 -m unittest tests.test_iso3166-2

    #upload to Code Coverage, only if matrix python version is 3.9
    - name: Upload Coverage Report to Codecov
      if: ${{ matrix.python-version == '3.9' }}
      uses: codecov/codecov-action@v3
      env: 
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        flags: iso3166_2_workflow
    
    #upload test artifacts to workflow
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test_artifacts
        path: |
          artifacts/package_safety_output.txt
          artifacts/bandit_output.txt
          artifacts/coverage.txt
        if-no-files-found: error 

  #linter check on repo
  linter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]   #testing on multiple python versions
    steps:
      #checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # install all required modules and dependancies using pip installation
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
      
      #create temp artifacts repo
      - name: Artifacts mkdir
        run: mkdir flake8_artifacts

      #linting with flake8
      - name: Lint with flake8
        run: |
          echo "Testing using flake8..."
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8_artifacts/flake8_output.txt
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics >> flake8_artifacts/flake8_output.txt
        continue-on-error: true
      
      #upload artifacts to repo
      - name: Upload flake8 Artifact
        uses: actions/upload-artifact@v3
        with:
          name: flake8_artifact
          path: flake8_artifacts/flake8_output.txt
          if-no-files-found: error 
